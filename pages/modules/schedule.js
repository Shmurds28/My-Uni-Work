import Head from 'next/head'
import Image from 'next/image'
import styles from '../../styles/Home.module.css'
import img from '../../../logosamples/1.JPG' 
import welcomeImg from "../../public/welcome.png";
import Navbar from '../../components/Navbar'
import Footer from '../../components/Footer'
import MenuIcon from '@heroicons/react/solid'
import readingImg from '../../public/reading.png'
import { BookOpenIcon } from '@heroicons/react/solid';
import Link from 'next/link';
import Week from '../../components/assessment/Week';
import DashboardSidebar from '../../components/DashboardSidebar';
import { useUserAuth } from '../../context/UserAuthContext';
import { db } from '../../firebase';
import { useEffect, useState } from 'react';
import { collection, doc, getDocs, onSnapshot, orderBy, query } from 'firebase/firestore';
import { useRouter } from 'next/router';

function schedule() {
  const {user, userInfo} = useUserAuth();
  const [semester1Ass, setsemester1Ass] = useState([]);
  const [semester2Ass, setsemester2Ass] = useState([]);
  const [yearAss, setyearAss] = useState([]);
  const [weeks1, setWeeks1] = useState([]);
  const [weeks2, setWeeks2] = useState([]);
  const [weeksY, setWeeksY] = useState([]);
  const [semester, setSemester] = useState("Semester 1");
  const [modules, setModules] = useState([]);
  const [showModule, setShowModule] = useState(""); 
  const [isShow, setIsShow] = useState(false);
  const [showSemester1, setShowSemester1] = useState([]);
  const [showSemester2, setShowSemester2] = useState([]);
  const [showSemesterY, setShowSemesterY] = useState([]);
  const router = useRouter();

  //get modules from the database
  useEffect(
    () => 
      onSnapshot(
        query(collection(db, 'modules')),
        (snapshot) =>{
          setModules(snapshot.docs);  
        },
      ),
      [db]
  );
  
  //Get distinct weeks 
  useEffect(
    () => 
      onSnapshot(
        query(collection(db, "modules")), (userSnapshot) =>{
          // const userModules = userSnapshot.data().modules;
          userSnapshot.docs.map(userModule =>{
            getDocs(collection(db, 'modules', userModule.data().moduleCode, "assessments"), orderBy("submissionWeek")).then(assessments =>{
                assessments.forEach(assessment =>{
                  if(assessment.data().semester == "Semester 1"){
                    setsemester1Ass(semester1Ass => [...semester1Ass, assessment]);
                    if(weeks1.indexOf(assessment.data().submissionWeek) == -1){
                      setWeeks1(weeks1 => [...weeks1, Number(assessment.data().submissionWeek)]);
                     
                    }
                    

                  }else if(assessment.data().semester == "Semester 2"){
                    setsemester2Ass(semester2Ass => [...semester2Ass, assessment]);
                    if(weeks2.indexOf(assessment.data().submissionWeek) == -1){
                      setWeeks2(weeks2 => [...weeks2, assessment.data().submissionWeek]);
                    }
                  }else{
                    setyearAss(yearAss => [...yearAss, assessment]);
                    if(weeksY.indexOf(assessment.data().submissionWeek) == -1){
                      setWeeksY(weeksY => [...weeksY, assessment.data().submissionWeek]);
                    }
                  }
                });
            });
          });
        }
      ),
      [db]
  );

  function bubbleSort(arr){

    //Outer pass
    for(let i = 0; i < arr.length; i++){

        //Inner pass
        for(let j = 0; j < arr.length - i - 1; j++){

            //Value comparison using ascending order

            if(arr[j + 1] < arr[j]){

                //Swapping
                [arr[j + 1],arr[j]] = [arr[j],arr[j + 1]]
            }
        }
    };
    return arr;
};
  
  const removeDuplicates = (arr) =>  {
    return arr.filter((item,
        index) => arr.indexOf(item) == index).sort();
  }

  const handleShowModule = (e) =>{
    setShowModule(e.target.value);
    if(e.target.value == "All" ){
      setIsShow(false);
      return;
    }
    setIsShow(true);
    setShowSemester1(semester1Ass.filter(ass => (ass.data().moduleName == e.target.value)));
    setShowSemester2(semester2Ass.filter(ass => (ass.data().moduleName == e.target.value)));
    setShowSemesterY(yearAss.filter(ass => (ass.data().moduleName == e.target.value)));
    
    
  }

  if(!user || userInfo?.isAdmin){
    // router.back();
    // return;
  }

  return (
    <div className="h-full">
      <Head>
        <title>My Uni Work</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Navbar />
      <div className="lg:flex space-x-0 h-full">
          

          {/* content area */}
          <div className="flex flex-col lg:px-10 mt-4 space-y-2 mb-6 w-full">
             <p className="text-lg lg:text-2xl m-2 font-semibold text-[#333] text-center mb-8">
                  Provisional Workload Schedule   
              </p>
            <div className="lg:flex m-2 items-center justify-between">
              

              <div>
                 <span className="block text-sm font-semibold text-slate-700">
                    Show schedule for: 
                 </span>
                 <select value={showModule} onChange= {(e) => handleShowModule(e)} name="semester" id="semester" className="m-1 max-w-sm rounded-md mt-1 px-3 py-2 bg-white border w-full shadow-sm border-slate-300">
                    <option value="All">All</option>
                    {modules.map(mod => (
                      <option key={mod.id} value={mod.data().moduleName}> {mod.data().moduleCode} - {mod.data().moduleName}</option>
                    ))}
                  </select>
              </div>


              <div>
                <label className="block">
                  <span className=" block text-sm font-semibold text-slate-700">
                    Sort by Semester
                  </span>
                  <select value={semester} onChange= {(e) => setSemester(e.target.value)} name="semester" id="semester" className="m-1 max-w-sm rounded-md mt-1 px-3 py-2 bg-white border w-full shadow-sm border-slate-300">
                    <option value="Semester 1">Semester 1</option>
                    <option value="Semester 2">Semester 2</option>
                    <option value="Year">Year</option>
                  </select>
                </label>
             </div>
                
            </div>
             
             {user && (
                <div className="flex items-center">
                <button className="bg-[#103A5C] text-white font-semibold p-3 rounded-md hover:opacity-90">
                  <Link href="/dashboard/schedule" className="navLink">
                          Personal workload schedule
                  </Link>
                      
                  </button>
              </div>
             )}
                       
            
            {semester === "Semester 1" && (
               <div className="flex flex-col gap-8">
               <div className="flex flex-col border p-1 shadow">
                 <h1 className=" text-lg lg:text-2xl m-2 font-semibold text-[#333]">Semester 1</h1> 

                  {(!isShow) && (
                    <div className="gap-1">
                        {weeks1.length == 0 && (
                            <p className="ml-10 font-base text-md">No Submissions...</p>
                        )}
      
                          {bubbleSort(removeDuplicates(weeks1)).map(week => (
                              <Week key={week} week={week} assessments={semester1Ass.filter(ass => (ass.data().submissionWeek == week))}/>
                          ))}
                    </div>
                  )}

                  {(isShow) && (
                    <div className="gap-1">
                        {weeks1.length == 0 && (
                            <p className="ml-10 font-base text-md">No Submissions...</p>
                          )}
      
                          {bubbleSort(removeDuplicates(weeks1)).map(week => (
                              <Week key={week} week={week} assessments={showSemester1.filter(ass => (ass.data().submissionWeek == week))}/>
                          ))}
                    </div>
                  )}
                                  
              
               </div>
             
            

             {/* Semester 2 */}
             <div className="flex flex-col border p-1 shadow"> 
               <h1 className="text-lg lg:text-2xl m-2 font-semibold text-[#333]">Semester 2</h1> 
               {(!isShow) && (
                    <div className="gap-1">
                        {weeks2.length == 0 && (
                            <p className="ml-10 font-base text-md">No Submissions...</p>
                        )}
      
                          {bubbleSort(removeDuplicates(weeks2)).map(week => (
                              <Week key={week} week={week} assessments={semester2Ass.filter(ass => (ass.data().submissionWeek == week))}/>
                          ))}
                    </div>
                  )}

                  {(isShow) && (
                    <div className="gap-1">
                        {weeks2.length == 0 && (
                            <p className="ml-10 font-base text-md">No Submissions...</p>
                          )}
      
                          {bubbleSort(removeDuplicates(weeks2)).map(week => (
                              <Week key={week} week={week} assessments={showSemester2.filter(ass => (ass.data().submissionWeek == week))}/>
                          ))}
                    </div>
                  )}
               
             
             </div>

             {/* Year */}
             <div className="flex flex-col border p-1 shadow">
               <h1 className="text-lg lg:text-2xl m-2 font-semibold text-[#333]">Year</h1> 
               {(!isShow) && (
                    <div className="gap-1">
                        {weeksY.length == 0 && (
                            <p className="ml-10 font-base text-md">No Submissions...</p>
                        )}
      
                          {bubbleSort(removeDuplicates(weeksY)).map(week => (
                              <Week key={week} week={week} assessments={yearAss.filter(ass => (ass.data().submissionWeek == week))}/>
                          ))}
                    </div>
                  )}

                  {(isShow) && (
                    <div className="gap-1">
                        {weeksY.length == 0 && (
                            <p className="ml-10 font-base text-md">No Submissions...</p>
                          )}
      
                          {bubbleSort(removeDuplicates(weeksY)).map(week => (
                              <Week key={week} week={week} assessments={showSemesterY.filter(ass => (ass.data().submissionWeek == week))}/>
                          ))}
                    </div>
                  )}
               
              </div>

              </div>
            )}

            {semester === "Semester 2" && (
              
              
               <div className="flex flex-col gap-8">
                  {/* Semester 2 */}
                  <div className="flex flex-col border p-1 shadow">
                    <h1 className="text-lg lg:text-2xl m-2 font-semibold text-[#333]">Semester 2</h1> 
                    {(!isShow) && (
                    <div className="gap-1">
                        {weeks2.length == 0 && (
                            <p className="ml-10 font-base text-md">No Submissions...</p>
                        )}
      
                          {bubbleSort(removeDuplicates(weeks2)).map(week => (
                              <Week key={week} week={week} assessments={semester2Ass.filter(ass => (ass.data().submissionWeek == week))}/>
                          ))}
                    </div>
                  )}

                  {(isShow) && (
                    <div className="gap-1">
                        {weeks2.length == 0 && (
                            <p className="ml-10 font-base text-md">No Submissions...</p>
                          )}
      
                          {bubbleSort(removeDuplicates(weeks2)).map(week => (
                              <Week key={week} week={week} assessments={showSemester2.filter(ass => (ass.data().submissionWeek == week))}/>
                          ))}
                    </div>
                  )}
                    
                  </div>

                  {/* Semester 1 */}
                  <div className="flex flex-col border p-1 shadow">
                    <h1 className="text-lg lg:text-2xl m-2 font-semibold text-[#333]">Semester 1</h1> 
                    {(!isShow) && (
                    <div className="gap-1">
                        {weeks1.length == 0 && (
                            <p className="ml-10 font-base text-md">No Submissions...</p>
                        )}
      
                          {bubbleSort(removeDuplicates(weeks1)).map(week => (
                              <Week key={week} week={week} assessments={semester1Ass.filter(ass => (ass.data().submissionWeek == week))}/>
                          ))}
                    </div>
                  )}

                  {(isShow) && (
                    <div className="gap-1">
                        {weeks1.length == 0 && (
                            <p className="ml-10 font-base text-md">No Submissions...</p>
                          )}
      
                          {bubbleSort(removeDuplicates(weeks1)).map(week => (
                              <Week key={week} week={week} assessments={showSemester1.filter(ass => (ass.data().submissionWeek == week))}/>
                          ))}
                    </div>
                  )}
                  
                  </div>

                  {/* Year */}
                  <div className="flex flex-col border p-1 shadow">
                    <h1 className="text-lg lg:text-2xl m-2 font-semibold text-[#333]">Year</h1> 
                    {(!isShow) && (
                    <div className="gap-1">
                        {weeksY.length == 0 && (
                            <p className="ml-10 font-base text-md">No Submissions...</p>
                        )}
      
                          {bubbleSort(removeDuplicates(weeksY)).map(week => (
                              <Week key={week} week={week} assessments={yearAss.filter(ass => (ass.data().submissionWeek == week))}/>
                          ))}
                    </div>
                  )}

                  {(isShow) && (
                    <div className="gap-1">
                        {weeksY.length == 0 && (
                            <p className="ml-10 font-base text-md">No Submissions...</p>
                          )}
      
                          {bubbleSort(removeDuplicates(weeksY)).map(week => (
                              <Week key={week} week={week} assessments={showSemesterY.filter(ass => (ass.data().submissionWeek == week))}/>
                          ))}
                    </div>
                  )}
                    
                    </div>

                    </div>
            )}

            {semester === "Year" && (
               <div className="flex flex-col gap-8">
                  {/* Year */}
                    <div className="flex flex-col border p-1 shadow">
                      <h1 className="text-lg lg:text-2xl m-2 font-semibold text-[#333]">Year</h1> 
                      {(!isShow) && (
                    <div className="gap-1">
                        {weeksY.length == 0 && (
                            <p className="ml-10 font-base text-md">No Submissions...</p>
                        )}
      
                          {bubbleSort(removeDuplicates(weeksY)).map(week => (
                              <Week key={week} week={week} assessments={yearAss.filter(ass => (ass.data().submissionWeek == week))}/>
                          ))}
                    </div>
                  )}

                  {(isShow) && (
                    <div className="gap-1">
                        {weeksY.length == 0 && (
                            <p className="ml-10 font-base text-md">No Submissions...</p>
                          )}
      
                          {bubbleSort(removeDuplicates(weeksY)).map(week => (
                              <Week key={week} week={week} assessments={showSemesterY.filter(ass => (ass.data().submissionWeek == week))}/>
                          ))}
                    </div>
                  )}
                      
                      </div>

                {/* Semester 1 */}
               <div className="flex flex-col border p-1 shadow">
                 <h1 className="text-lg lg:text-2xl m-2 font-semibold text-[#333]">Semester 1</h1> 
                 {(!isShow) && (
                    <div className="gap-1">
                        {weeks1.length == 0 && (
                            <p className="ml-10 font-base text-md">No Submissions...</p>
                        )}
      
                          {bubbleSort(removeDuplicates(weeks1)).map(week => (
                              <Week key={week} week={week} assessments={semester1Ass.filter(ass => (ass.data().submissionWeek == week))}/>
                          ))}
                    </div>
                  )}

                  {(isShow) && (
                    <div className="gap-1">
                        {weeks1.length == 0 && (
                            <p className="ml-10 font-base text-md">No Submissions...</p>
                          )}
      
                          {bubbleSort(removeDuplicates(weeks1)).map(week => (
                              <Week key={week} week={week} assessments={showSemester1.filter(ass => (ass.data().submissionWeek == week))}/>
                          ))}
                    </div>
                  )}
               
               </div>
             
            

                {/* Semester 2 */}
                <div className="flex flex-col border p-1 shadow">
                  <h1 className="text-lg lg:text-2xl m-2 font-semibold text-[#333]">Semester 2</h1> 
                  {(!isShow) && (
                    <div className="gap-1">
                        {weeks2.length == 0 && (
                            <p className="ml-10 font-base text-md">No Submissions...</p>
                        )}
      
                          {bubbleSort(removeDuplicates(weeks2)).map(week => (
                              <Week key={week} week={week} assessments={semester2Ass.filter(ass => (ass.data().submissionWeek == week))}/>
                          ))}
                    </div>
                  )}

                  {(isShow) && (
                    <div className="gap-1">
                        {weeks2.length == 0 && (
                            <p className="ml-10 font-base text-md">No Submissions...</p>
                          )}
      
                          {bubbleSort(removeDuplicates(weeks2)).map(week => (
                              <Week key={week} week={week} assessments={showSemester2.filter(ass => (ass.data().submissionWeek == week))}/>
                          ))}
                    </div>
                  )}
                  
                </div>

              </div>
            )}
  
          </div>
            
            
      </div>

      <Footer />
    </div>

)
}

export default schedule
