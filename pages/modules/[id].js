import { doc, onSnapshot, query, collection, orderBy, getDocs } from 'firebase/firestore';
import Head from 'next/head'
import { useRouter } from 'next/router';
import React, { useEffect, useState } from 'react'
import { useRecoilState } from 'recoil';
import { modalState, addAssessment } from '../../atoms/modalAtom';
import Module from '../../components/module/Module';
import Navbar from '../../components/Navbar'
import { db } from '../../firebase';
import Footer from '../../components/Footer';
import Assessment from './../../components/assessment/Assessment';
import MyModal from '../../components/Modal';import Week from '../../components/assessment/Week';

function modulePage() {
    const [isOpen, setIsOpen] = useRecoilState(modalState);
    const [isAddAssessment, setIsAddAssessment] = useRecoilState(addAssessment);
    const [module, setModule] = useState("");
    const [assessments, setAssessments] = useState([]);
    const [weeks, setWeeks] = useState([]);
    const router = useRouter();
    const {id} = router.query; 

    useEffect(
        () =>
          onSnapshot(query(doc(db, "modules", id)), (snapshot) => {
            setModule(snapshot.data());
          }),
        [db]
    );
    
    useEffect(
        () => {
            getDocs(collection(db, "modules", id, "assessments")).then(assessmentDocs => {
              assessmentDocs.forEach(ass => {
                 setAssessments(assessments => [...assessments, ass.data()]);
                 if(weeks.indexOf(ass.data().submissionWeek) == -1){
                  setWeeks(weeks => [...weeks, Number(ass.data().submissionWeek)]);
                 
                }

              });
            });
        
          },
      [db]
    )
    
    function bubbleSort(arr){

      //Outer pass
      for(let i = 0; i < arr.length; i++){
  
          //Inner pass
          for(let j = 0; j < arr.length - i - 1; j++){
  
              //Value comparison using ascending order
  
              if(arr[j + 1] < arr[j]){
  
                  //Swapping
                  [arr[j + 1],arr[j]] = [arr[j],arr[j + 1]]
              }
          }
      };
      return arr;
  };
    
    const removeDuplicates = (arr) =>  {
      return arr.filter((item,
          index) => arr.indexOf(item) == index).sort();
    }

  return (
    <div className="lg:h-full">
      <Head>
        <title>My Uni Work | Module</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Navbar />
      <div className=" flex flex-col">
        <div className="">
           <Module key={id} module={module} modulePage/></div>
         
         <div className=' px-4 md:px-40 lg:px-80 lg:py-8'> 
            <h1 className='text-[#333] font-semibold mb-3 text-3xl text-center'>Assessments</h1>
                <div className="gap-1">
                  {weeks.length == 0 && (
                     <p className="ml-10 font-base text-md">No Assessments available...</p>
                   )}

                   {bubbleSort(removeDuplicates(weeks)).map(week => (
                       <Week key={week} viewModulePage week={week} assessments={assessments.filter(ass => (ass.submissionWeek == week))}/>
                   ))}
                 </div>
            
        </div>
      </div>

      {isOpen && <MyModal module={module}/>}

      <Footer />

    </div>
  )
}

export default modulePage
